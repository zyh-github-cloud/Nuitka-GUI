# 帮助文本内容模块
def get_help_content():
    """获取帮助对话框的HTML内容
    
    返回帮助对话框中显示的完整HTML格式文本内容。
    包含工具概述、功能特性、使用指南、常见问题等详细信息。
    """
    return """
        <h2>Nuitka EXE 打包工具使用帮助</h2>
        
        <h3>概述</h3>
        <p>Nuitka EXE 打包工具是一个功能强大的图形化界面应用程序，专门用于将Python脚本打包成独立的可执行文件（EXE）。该工具基于Nuitka编译器，提供了丰富的配置选项，支持多种打包模式、优化设置和依赖管理，适用于从简单脚本到复杂GUI应用的各种打包需求。</p>
        
        <h3>主要功能特性</h3>
        <ol>
            <li><b>智能环境检测</b>：自动识别系统中的Python环境，包括系统Python、Conda环境、虚拟环境等</li>
            <li><b>灵活的基础配置</b>：主脚本选择、输出目录设置、应用程序命名和图标配置</li>
            <li><b>全面的依赖管理</b>：常用插件支持、自定义模块和资源文件添加、依赖冲突检测</li>
            <li><b>高级编译优化</b>：编译器选择、多级优化、LTO链接优化、UPX压缩、并行编译</li>
            <li><b>实时进度监控</b>：8阶段打包进度跟踪、详细日志输出、异常处理和状态反馈</li>
            <li><b>便捷的工具集成</b>：图标转换、包管理、Python脚本运行、缓存清理等辅助功能</li>
        </ol>
        
        <h3>详细使用指南</h3>
        
        <h4>1. 环境准备与检测</h4>
        <ul>
            <li><b>系统要求</b>：
                <ul>
                    <li>Windows 7/8/10/11 (64位)</li>
                    <li>Python 3.7+ (推荐3.8+)</li>
                    <li>至少4GB内存（大型项目建议8GB+）</li>
                    <li>足够的磁盘空间（建议预留10GB+）</li>
                </ul>
            </li>
            <li><b>编译器要求</b>：
                <ul>
                    <li><b>MSVC</b>：Microsoft Visual C++ 2015-2022（推荐VS 2019+）</li>
                    <li><b>MinGW</b>：MinGW-w64 GCC 8.1+（推荐TDM-GCC）</li>
                    <li>工具会自动检测可用的编译器</li>
                </ul>
            </li>
            <li><b>环境检测</b>：
                <ul>
                    <li>启动时自动扫描系统中的Python环境</li>
                    <li>支持检测：系统Python、Anaconda/Miniconda/Mamba环境、venv/virtualenv环境</li>
                    <li>通过下拉框可切换不同的Python环境</li>
                    <li>环境切换后会自动更新Python版本信息</li>
                </ul>
            </li>
        </ul>
        
        <h4>2. 基础配置详解</h4>
        <ul>
            <li><b>主脚本选择</b>：
                <ul>
                    <li>点击"浏览"按钮选择Python主文件（.py格式）</li>
                    <li>支持拖拽文件到输入框</li>
                    <li>选择后会自动分析脚本内容，检测使用的GUI库（Tkinter/PyQt5/PySide6等）</li>
                    <li>自动同步更新运行Python文件路径</li>
                </ul>
            </li>
            <li><b>输出目录配置</b>：
                <ul>
                    <li>默认为脚本所在目录下的dist文件夹</li>
                    <li>可自定义任意目录路径</li>
                    <li>打包完成后可一键打开输出目录</li>
                    <li>支持相对路径和绝对路径</li>
                </ul>
            </li>
            <li><b>应用程序设置</b>：
                <ul>
                    <li><b>名称</b>：设置生成的EXE文件名，默认与脚本名相同（不含.py扩展名）</li>
                    <li><b>图标</b>：支持ICO格式图标文件</li>
                    <li><b>图标转换</b>：内置图片转ICO功能，支持PNG/JPG/BMP等格式转换</li>
                    <li><b>控制台窗口</b>：可选择显示或隐藏控制台窗口（GUI应用建议隐藏）</li>
                </ul>
            </li>
        </ul>
        
        <h4>3. 依赖管理详解</h4>
        <ul>
            <li><b>常用插件系统</b>：
                <ul>
                    <li><code>tk-inter</code>：支持Tkinter GUI应用，自动包含tcl/tk库</li>
                    <li><code>pyside2</code>/<code>pyside6</code>：支持PySide2/PySide6应用，包含Qt库文件</li>
                    <li><code>pyqt5</code>/<code>pyqt6</code>：支持PyQt5/PyQt6应用，自动处理Qt依赖</li>
                    <li><code>numpy</code>：支持NumPy科学计算库，包含必要的DLL文件</li>
                    <li><code>scipy</code>：支持SciPy科学计算库</li>
                    <li><code>pandas</code>：支持Pandas数据分析库</li>
                    <li><code>matplotlib</code>：支持Matplotlib绘图库</li>
                    <li><code>pillow</code>：支持PIL/Pillow图像处理库</li>
                    <li><code>opencv</code>：支持OpenCV计算机视觉库</li>
                    <li><code>upx</code>：启用UPX压缩，需要单独安装UPX工具</li>
                    <li><code>anti-bloat</code>：减少程序体积，移除不必要的模块</li>
                    <li><code>data-files</code>：包含数据文件，支持资源文件打包</li>
                    <li><code>multiprocessing</code>：支持多进程功能</li>
                    <li><code>threading</code>：支持多线程功能</li>
                    <li><code>ssl</code>：支持SSL/TLS加密功能</li>
                    <li><code>sqlite</code>：支持SQLite数据库</li>
                </ul>
            </li>
            <li><b>插件冲突检测</b>：
                <ul>
                    <li>自动检测PySide6与PyQt5的冲突（不能同时启用）</li>
                    <li>提供冲突提示和建议解决方案</li>
                    <li>智能推荐最适合的插件组合</li>
                </ul>
            </li>
            <li><b>自定义依赖管理</b>：
                <ul>
                    <li><b>添加模块</b>：手动添加Python模块，支持包名和模块名</li>
                    <li><b>添加资源</b>：添加非Python文件（配置文件、图片、音频、视频等）</li>
                    <li><b>路径映射</b>：设置资源文件在打包后的路径结构</li>
                    <li><b>依赖管理</b>：支持编辑和删除已添加的依赖项</li>
                    <li><b>批量操作</b>：支持批量添加多个模块或资源文件</li>
                </ul>
            </li>
        </ul>
        
        <h4>4. 高级设置详解</h4>
        <ul>
            <li><b>编译器配置</b>（仅Windows）：
                <ul>
                    <li><b>MSVC编译器</b>：
                        <ul>
                            <li>推荐使用Visual Studio 2019或2022</li>
                            <li>需要安装C++桌面开发工作负载</li>
                            <li>支持最新的C++标准和优化特性</li>
                            <li>生成的程序性能更好，体积更小</li>
                        </ul>
                    </li>
                    <li><b>MinGW编译器</b>：
                        <ul>
                            <li>推荐使用TDM-GCC或MinGW-w64</li>
                            <li>无需安装Visual Studio</li>
                            <li>兼容性较好，但性能略低于MSVC</li>
                            <li>适合快速部署和测试</li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li><b>Python优化级别</b>：
                <ul>
                    <li><b>无优化</b>：保留所有调试信息和文档字符串，适合开发调试</li>
                    <li><b>基本优化（-O）</b>：
                        <ul>
                            <li>移除assert语句和__debug__相关代码</li>
                            <li>略微减小文件体积，轻微提升运行速度</li>
                            <li>适合大多数应用场景</li>
                        </ul>
                    </li>
                    <li><b>高级优化（-OO）</b>：
                        <ul>
                        <li>在基本优化基础上移除所有文档字符串</li>
                        <li>显著减小文件体积，提升运行速度</li>
                        <li>会影响help()函数和文档字符串的使用</li>
                        <li>适合生产环境发布</li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li><b>编译优化技术</b>：
                <ul>
                    <li><b>LTO链接优化</b>：
                        <ul>
                            <li>Link Time Optimization，链接时优化</li>
                            <li>可显著提升程序运行性能（10-30%）</li>
                            <li>需要编译器支持LTO功能</li>
                            <li>会增加编译时间，但运行效果更好</li>
                        </ul>
                    </li>
                    <li><b>UPX压缩</b>：
                        <ul>
                            <li>Ultimate Packer for eXecutables压缩</li>
                            <li>可减小EXE文件体积（30-70%）</li>
                            <li>需要单独下载UPX工具并添加到PATH</li>
                            <li>工具支持自动检测UPX路径</li>
                            <li>压缩后首次启动会稍慢，后续运行正常</li>
                        </ul>
                    </li>
                    <li><b>并行编译</b>：
                        <ul>
                            <li>支持多线程并行编译C代码</li>
                            <li>通过滑块设置并行任务数（1-16）</li>
                            <li>推荐设置为CPU核心数的1-2倍</li>
                            <li>可大幅减少编译时间（50-80%）</li>
                            <li>会增加内存使用量</li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li><b>打包模式</b>：
                <ul>
                    <li><b>单文件模式</b>：生成单个EXE文件，便于分发</li>
                    <li><b>目录模式</b>：生成包含EXE和依赖文件的目录，启动更快</li>
                    <li><b>跟随导入模式</b>：动态分析导入，减少不必要的依赖</li>
                </ul>
            </li>
        </ul>
        
        <h4>5. 打包过程详解</h4>
        <ul>
            <li><b>8阶段打包流程</b>：
                <ol>
                    <li><b>初始化阶段</b>：环境检查、参数验证、工作目录准备</li>
                    <li><b>依赖分析阶段</b>：分析Python代码依赖，构建模块依赖图</li>
                    <li><b>模块编译阶段</b>：将Python模块编译为C代码</li>
                    <li><b>C代码生成阶段</b>：生成可编译的C源代码文件</li>
                    <li><b>C编译阶段</b>：编译C代码为目标文件（.obj/.o）</li>
                    <li><b>C链接阶段</b>：链接目标文件和库文件，生成EXE</li>
                    <li><b>后处理阶段</b>：UPX压缩、资源文件处理、优化</li>
                    <li><b>完成阶段</b>：清理临时文件、生成最终输出</li>
                </ol>
            </li>
            <li><b>进度监控</b>：
                <ul>
                    <li>实时显示各阶段进度百分比</li>
                    <li>进度条防倒退机制，确保进度准确性</li>
                    <li>显示当前阶段名称和状态信息</li>
                    <li>预估剩余时间和总体进度</li>
                </ul>
            </li>
            <li><b>日志系统</b>：
                <ul>
                    <li>彩色日志输出，区分信息、警告、错误等级别</li>
                    <li>实时显示Nuitka编译器的详细输出</li>
                    <li>支持日志复制和双击查看详情</li>
                    <li>自动滚动到最新日志内容</li>
                    <li>日志行数限制，避免内存占用过高</li>
                </ul>
            </li>
            <li><b>异常处理</b>：
                <ul>
                    <li>文件不存在错误处理</li>
                    <li>权限错误处理和权限提升建议</li>
                    <li>编译器错误诊断和解决方案</li>
                    <li>内存不足错误处理</li>
                    <li>网络错误处理（依赖下载）</li>
                    <li>系统资源监控和预警</li>
                </ul>
            </li>
        </ul>
        
        <h4>6. 辅助功能详解</h4>
        <ul>
            <li><b>图标转换工具</b>：
                <ul>
                    <li>支持PNG、JPG、BMP、GIF等格式转换为ICO</li>
                    <li>支持多尺寸图标生成（16x16到256x256）</li>
                    <li>自动优化图标质量和文件大小</li>
                    <li>预览转换后的图标效果</li>
                </ul>
            </li>
            <li><b>包管理功能</b>：
                <ul>
                    <li>支持conda/mamba/pip包管理器</li>
                    <li>安装/卸载Python包</li>
                    <li>自动激活当前选择的Python环境</li>
                    <li>显示包管理操作的详细输出</li>
                </ul>
            </li>
            <li><b>Python脚本运行</b>：
                <ul>
                    <li>直接运行Python脚本进行测试</li>
                    <li>使用当前选择的Python环境</li>
                    <li>显示脚本运行输出和错误信息</li>
                    <li>便于在打包前测试脚本功能</li>
                </ul>
            </li>
            <li><b>缓存清理功能</b>：
                <ul>
                    <li>手动清理build文件夹和临时文件</li>
                    <li>释放磁盘空间</li>
                    <li>解决缓存导致的编译问题</li>
                    <li>支持确认对话框防止误操作</li>
                </ul>
            </li>
            <li><b>配置管理</b>：
                <ul>
                    <li>保存当前配置为JSON文件</li>
                    <li>加载之前保存的配置</li>
                    <li>包含所有设置项：编译参数、插件列表、依赖项等</li>
                    <li>便于项目配置的复用和分享</li>
                </ul>
            </li>
        </ul>
        
        <h4>7. 操作流程指南</h4>
        <ol>
            <li><b>环境准备</b>：
                <ul>
                    <li>确保Python环境正确安装</li>
                    <li>安装必要的编译器（MSVC或MinGW）</li>
                    <li>可选：安装UPX压缩工具</li>
                </ul>
            </li>
            <li><b>项目配置</b>：
                <ul>
                    <li>选择主脚本文件</li>
                    <li>设置输出目录和应用程序名称</li>
                    <li>选择或转换应用程序图标</li>
                    <li>选择合适的Python环境</li>
                </ul>
            </li>
            <li><b>依赖配置</b>：
                <ul>
                    <li>根据项目需求选择常用插件</li>
                    <li>手动添加项目特有的依赖模块</li>
                    <li>添加必要的资源文件</li>
                    <li>检查并解决插件冲突</li>
                </ul>
            </li>
            <li><b>高级配置</b>：
                <ul>
                    <li>选择合适的编译器</li>
                    <li>设置Python优化级别</li>
                    <li>配置LTO优化和UPX压缩</li>
                    <li>调整并行编译任务数</li>
                </ul>
            </li>
            <li><b>执行打包</b>：
                <ul>
                    <li>点击"开始打包"按钮</li>
                    <li>监控打包进度和日志输出</li>
                    <li>处理可能出现的错误和警告</li>
                    <li>等待打包完成</li>
                </ul>
            </li>
            <li><b>结果验证</b>：
                <ul>
                    <li>检查生成的EXE文件</li>
                    <li>测试EXE文件的功能</li>
                    <li>验证所有依赖是否正确包含</li>
                    <li>检查文件大小和性能表现</li>
                </ul>
            </li>
        </ol>
        
        <h4>8. 常见问题与解决方案</h4>
        <ul>
            <li><b>编译器相关错误</b>：
                <ul>
                    <li><b>找不到编译器</b>：检查MSVC或MinGW是否正确安装，环境变量是否配置</li>
                    <li><b>编译器版本不兼容</b>：升级到支持的编译器版本</li>
                    <li><b>编译器内部错误</b>：尝试更换编译器或降低优化级别</li>
                </ul>
            </li>
            <li><b>依赖相关错误</b>：
                <ul>
                    <li><b>ModuleNotFoundError</b>：在依赖管理中手动添加缺少的模块</li>
                    <li><b>DLL加载失败</b>：确保所有必要的DLL文件都被包含</li>
                    <li><b>插件冲突</b>：检查并解决PyQt5/PySide6等GUI库的冲突</li>
                </ul>
            </li>
            <li><b>性能与优化问题</b>：
                <ul>
                    <li><b>文件过大</b>：启用UPX压缩、使用高级优化、启用anti-bloat插件</li>
                    <li><b>编译缓慢</b>：增加并行编译任务数、关闭LTO优化、使用更快的编译器</li>
                    <li><b>运行缓慢</b>：启用LTO优化、使用更高级的Python优化</li>
                </ul>
            </li>
            <li><b>系统资源问题</b>：
                <ul>
                    <li><b>内存不足</b>：减少并行编译任务数、关闭其他内存密集型应用</li>
                    <li><b>磁盘空间不足</b>：清理临时文件、选择更大的磁盘分区</li>
                    <li><b>CPU占用过高</b>：降低并行编译任务数</li>
                </ul>
            </li>
            <li><b>运行时错误</b>：
                <ul>
                    <li><b>EXE无法启动</b>：检查依赖是否完整、尝试重新打包</li>
                    <li><b>功能异常</b>：检查资源文件是否正确包含、验证插件配置</li>
                    <li><b>权限错误</b>：以管理员身份运行或调整文件权限</li>
                </ul>
            </li>
        </ul>
        
        <h4>9. 最佳实践建议</h4>
        <ul>
            <li><b>开发阶段</b>：
                <ul>
                    <li>使用无优化模式进行调试</li>
                    <li>启用详细的日志输出</li>
                    <li>定期测试打包结果</li>
                </ul>
            </li>
            <li><b>发布阶段</b>：
                <ul>
                    <li>使用高级优化（-OO）</li>
                    <li>启用LTO优化和UPX压缩</li>
                    <li>使用anti-bloat插件减少体积</li>
                    <li>进行充分的功能测试</li>
                </ul>
            </li>
            <li><b>大型项目</b>：
                <ul>
                    <li>使用目录模式而非单文件模式</li>
                    <li>合理设置并行编译任务数</li>
                    <li>分模块打包，减少单个EXE体积</li>
                    <li>使用配置文件管理复杂设置</li>
                </ul>
            </li>
            <li><b>性能优化</b>：
                <ul>
                    <li>优先使用MSVC编译器</li>
                    <li>启用所有可用的优化选项</li>
                    <li>定期清理缓存文件</li>
                    <li>监控资源使用情况</li>
                </ul>
            </li>
        </ul>
        
        <h4>10. 技术支持与资源</h4>
        <ul>
            <li><b>官方资源</b>：
                <ul>
                    <li>Nuitka官方文档：https://nuitka.net/doc/user-manual.html</li>
                    <li>Nuitka GitHub仓库：https://github.com/Nuitka/Nuitka</li>
                    <li>Python官方文档：https://docs.python.org/</li>
                </ul>
            </li>
            <li><b>编译器下载</b>：
                <ul>
                    <li>Visual Studio：https://visualstudio.microsoft.com/</li>
                    <li>MinGW-w64：https://www.mingw-w64.org/</li>
                    <li>TDM-GCC：https://jmeubank.github.io/tdm-gcc/</li>
                </ul>
            </li>
            <li><b>工具下载</b>：
                <ul>
                    <li>UPX压缩工具：https://upx.github.io/</li>
                    <li>Conda：https://conda.io/</li>
                    <li>Mamba：https://mamba.readthedocs.io/</li>
                </ul>
            </li>
            <li><b>社区支持</b>：
                <ul>
                    <li>Stack Overflow：https://stackoverflow.com/</li>
                    <li>Python论坛：https://discuss.python.org/</li>
                    <li>相关技术博客和教程</li>
                </ul>
            </li>
        </ul>"""